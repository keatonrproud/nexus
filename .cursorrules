# Cursor Rules - Project Best Practices

## Tech Stack Overview
- **Frontend**: React + TypeScript + MaterialUI
- **Backend**: Node.js + Express + TypeScript
- **Auth**: JWT + Google OAuth + Secure Cookies
- **Database**: Supabase (PostgreSQL)
- **Analytics**: GoatCounter (self-hosted or cloud)

## Code Style & Formatting
- Use consistent indentation (2 spaces for React/TS, 4 for Node.js)
- Follow language-specific naming conventions
- Keep functions small and focused (max 20-30 lines)
- Write descriptive variable and function names
- Use TypeScript strictly - no `any` types except for rare exceptions
- Prefer functional components and hooks over class components

## Frontend Guidelines (React + TypeScript)

### Component Structure
- Use functional components with hooks
- Keep components under 200 lines
- Extract custom hooks for reusable logic
- Use MaterialUI components consistently
- Follow mobile-first responsive design principles, but it should still expand to full screen

### State Management
- Use optimistic loading patterns for all API calls
- Show loading states during async operations
- Handle error states gracefully with user-friendly messages
- Use React Query/SWR for server state management
- Keep local state minimal and close to where it's used

### Security & Environment
- **NEVER** put environment variables or secrets in frontend code
- **NEVER** make direct database calls from frontend
- All API calls must go through backend endpoints
- Store sensitive data (tokens) in secure httpOnly cookies only
- Validate all user inputs on both frontend and backend

### UI/UX Best Practices
- Mobile-first design approach, and it still expands to full screen
- Use MaterialUI theme consistently
- Implement proper accessibility (a11y) standards
- Provide immediate feedback for user actions
- Use skeleton loaders for better perceived performance

## Backend Guidelines (Node.js + Express)

### API Structure
- Use RESTful API conventions
- Implement proper HTTP status codes
- Use middleware for common functionality (auth, logging, error handling)
- Group related routes in separate router files
- Use axios for external API calls with proper error handling

### Authentication & Security
- Implement JWT tokens with refresh token rotation
- Store user tokens in secure httpOnly cookies
- Use Google OAuth for authentication
- Implement proper CORS policies
- Validate and sanitize all inputs
- Use helmet.js for security headers

### Database & Data Layer
- All database operations must be in backend only
- Use connection pooling for database connections
- Implement proper error handling for DB operations
- Use transactions for multi-step operations
- Implement database migrations and seeders

### Project Structure
```
backend/
├── src/
│   ├── controllers/     # Route handlers
│   ├── middleware/      # Custom middleware
│   ├── models/         # Database models
│   ├── routes/         # Route definitions
│   ├── services/       # Business logic
│   ├── utils/          # Helper functions
│   ├── config/         # Configuration files
│   └── types/          # TypeScript type definitions
├── tests/              # Test files
└── scripts/            # Scheduled scripts and utilities
```

## Configuration Management

### Environment Variables
- Use `.env` files for local development only
- Never commit `.env` files to version control
- Use separate config files for different environments
- Document all required environment variables in README
- Use validation for required environment variables on startup

### Config Files Structure
```
config/
├── database.ts         # Database configuration
├── auth.ts            # Authentication settings
├── scheduler.ts       # Cron job configurations
├── analytics.ts       # Analytics setup
└── index.ts          # Main config aggregator
```

## Scheduled Scripts & Background Jobs

### Scheduler Setup
- Use node-cron or similar for scheduled tasks
- Keep scheduled scripts in separate `/scripts` directory
- Log all scheduled job executions
- Implement proper error handling and notifications
- Use environment variables for schedule configurations

### Script Structure
```typescript
// scripts/example-job.ts
import cron from 'node-cron';
import { logger } from '../src/utils/logger';

export const scheduleExampleJob = () => {
  cron.schedule('0 0 * * *', async () => {
    try {
      logger.info('Starting example job');
      // Job logic here
      logger.info('Example job completed');
    } catch (error) {
      logger.error('Example job failed:', error);
    }
  });
};
```

## Analytics Implementation
- Implement analytics tracking on backend only
- Use event-driven analytics patterns
- Track user actions, errors, and performance metrics
- Ensure GDPR/privacy compliance
- Use structured logging for better analytics

## File Organization
- Group related files in logical directories
- Use barrel exports (index.ts) for cleaner imports
- Keep component files under 200 lines
- Separate business logic from UI components
- Use absolute imports with path mapping

## Dependencies & Package Management
- Pin exact versions for critical dependencies
- Regular security audits with `npm audit`
- Remove unused dependencies monthly
- Document why specific versions are pinned
- Use `npm ci` in production builds

## Testing Requirements
- Unit tests for all utility functions
- Integration tests for API endpoints
- Component testing for React components
- E2E tests for critical user flows
- Aim for >80% code coverage
- Mock external API calls in tests

## Performance Optimization
- Implement code splitting for React apps
- Use React.memo and useMemo appropriately
- Optimize bundle size with webpack-bundle-analyzer
- Implement proper caching strategies
- Use CDN for static assets
- Database query optimization

## Error Handling & Logging
- Implement global error boundaries in React
- Use structured logging with Winston or similar
- Log all API requests and responses in development
- Implement proper error monitoring (Sentry, etc.)
- Never expose sensitive data in error messages

## Team Collaboration
- Follow consistent coding patterns across the team
- Review AI-generated code before merging
- Share useful prompts and patterns with the team
- Use conventional commits for better history
- Document architectural decisions in ADRs

## Documentation
- Write clear commit messages
- Document complex logic with comments
- Keep README up to date
- Document API endpoints and data structures

## Testing
- Write unit tests for new features
- Test edge cases and error scenarios
- Keep test files organized alongside source code

## Cursor-Specific Guidelines
- Use meaningful commit messages for better AI context
- Structure code with clear separations for better AI understanding
- Add inline comments for complex business logic
- Use descriptive variable names to help AI suggestions

## Dependencies
- Keep dependencies up to date
- Document why specific versions are pinned
- Remove unused dependencies regularly

## Security
- Never commit sensitive data (API keys, passwords)
- Use environment variables for configuration
- Review AI suggestions before accepting them

## Performance
- Consider performance implications of AI suggestions
- Profile code when making optimizations
- Use appropriate data structures for the task

## Team Collaboration
- Follow consistent coding patterns across the team
- Review AI-generated code before merging
- Share useful prompts and patterns with the team 